-- Create the reports table
CREATE TABLE public.reports (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_id TEXT UNIQUE NOT NULL,
    user_id UUID REFERENCES auth.users(id) NULL,
    file_name TEXT NULL,
    total_book_characters INTEGER,
    total_book_chapters INTEGER,
    total_filtered_characters INTEGER,
    percentage_filtered NUMERIC,
    affected_chapter_count INTEGER,
    affected_chapter_names JSONB,
    total_swear_word_instances INTEGER,
    swear_word_map JSONB,
    all_flagged_sections JSONB,
    processing_status TEXT,
    error_message TEXT NULL,
    gemini_model_used TEXT,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments to describe the columns
COMMENT ON COLUMN public.reports.id IS 'Primary key for the report entry.';
COMMENT ON COLUMN public.reports.job_id IS 'Unique job identifier from the processing job.';
COMMENT ON COLUMN public.reports.user_id IS 'Optional: Links to the user who uploaded the book.';
COMMENT ON COLUMN public.reports.file_name IS 'Original name of the uploaded EPUB file.';
COMMENT ON COLUMN public.reports.total_book_characters IS 'Total characters in all processed chapters.';
COMMENT ON COLUMN public.reports.total_book_chapters IS 'Total number of chapters processed.';
COMMENT ON COLUMN public.reports.total_filtered_characters IS 'Total characters in all flagged sections.';
COMMENT ON COLUMN public.reports.percentage_filtered IS 'Percentage of book content flagged as explicit.';
COMMENT ON COLUMN public.reports.affected_chapter_count IS 'Number of chapters with flagged content.';
COMMENT ON COLUMN public.reports.affected_chapter_names IS 'JSON array of names/titles of chapters with flagged content.';
COMMENT ON COLUMN public.reports.total_swear_word_instances IS 'Total count of all swear words found.';
COMMENT ON COLUMN public.reports.swear_word_map IS 'JSON object mapping each found swear word to its count.';
COMMENT ON COLUMN public.reports.all_flagged_sections IS 'JSON array of all sections flagged by Gemini.';
COMMENT ON COLUMN public.reports.processing_status IS 'Final status of the EPUB processing job.';
COMMENT ON COLUMN public.reports.error_message IS 'Error details if processing failed.';
COMMENT ON COLUMN public.reports.gemini_model_used IS 'Gemini model version used for analysis.';
COMMENT ON COLUMN public.reports.created_at IS 'Timestamp of report creation.';

-- Enable Row Level Security (RLS)
ALTER TABLE public.reports ENABLE ROW LEVEL SECURITY;

-- Policies for RLS
-- Allow service_role (used by backend functions) to perform all actions.
-- Service roles bypass RLS by default, but explicit policies are good practice.
CREATE POLICY "Allow full access for service_role" ON public.reports
FOR ALL
USING (true)
WITH CHECK (true);

-- Example: Allow authenticated users to read their own reports (if user_id is populated)
-- CREATE POLICY "Allow individual read access for own reports" ON public.reports
-- FOR SELECT
-- USING (auth.uid() = user_id);

-- Example: Allow all authenticated users to read all reports (if reports are meant to be public among users)
-- CREATE POLICY "Allow authenticated read access to all reports" ON public.reports
-- FOR SELECT
-- USING (auth.role() = 'authenticated');
